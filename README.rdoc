= Considerations before starting work on the app:

Create form for user to input url to be shortened

On submit, generate the shortened link and allow user to click(test it)

== Schema

   # == Schema Info
   #
   # Table name: Links
   #
   #  id                  primary key
   #  original_url            
   #  shortened_url          
   #  created_at          
   #  updated_at            
   #
   # Table name: Visitors
   #
   #  id                  primary key
   #  ipaddr            
   #  created_at          
   #  updated_at            
   #  link_id             foreign key
   #

== Routes
When a request comes in with the format <tt>http://our-site/:key</tt>, redirect user to the original url, for e.g:
   1) example.com/8dK23e 
   2) /show/:key
   3) Link.find key
   4) redirect to the original_url returned, 

== API
To retrieve information regarding a specific shortlink:
   <tt>http://rshortener.herokuapp.com/:key.xml</tt> or
   <tt>http://rshortener.herokuapp.com/:key.json</tt>

For example: <tt>http://rshortener.herokuapp.com/v91pb.xml</tt> returns

   <link>
   	<id type="integer">1</id>
   	<original-url>http://store.apple.com/us/buy-mac/macbook-air</original-url>
   	<shortened-url>v91pb</shortened-url>
   	<created-at type="dateTime">2014-02-17T11:42:28Z</created-at>
   	<updated-at type="dateTime">2014-02-17T11:42:28Z</updated-at>
   </link>

To retrieve visitor information for a specific shortlink:
   <tt>http://rshortener.herokuapp.com/visitors/:key.xml</tt> or
   <tt>http://rshortener.herokuapp.com/visitors/:key.json</tt>

For example: <tt>http://rshortener.herokuapp.com/visitors/v91pb.xml</tt> returns

   <visitors type="array">
   	<visitor>
   	<id type="integer">19</id>
   	<ipaddr>175.156.163.203</ipaddr>
   	<link-id type="integer">1</link-id>
   	<created-at type="dateTime">2014-02-18T04:09:08Z</created-at>
   	<updated-at type="dateTime">2014-02-18T04:09:08Z</updated-at>
   	</visitor>
   </visitors>

== Helper
Come out with a method that returns a random string of length 5

== Validation
Ensure url is not empty and ensure that it is in a proper url format



= Future Improvements

== General
- better API support which allows shortlink creation via REST
- use ruby's to_s method to so that we no longer have to store the shortened_url in db. This avoids any lookup.
- url validation is too simple. find a gem that does extensive checks.
- store ip addresses as IpAddr instead of string
- add db index on shortened url to increase lookups
- add visits counter so that we can use that information to cache/store urls which are popular
- ensure shortened_url that is generated does not collide with existing values in the db


== Testing
- use Faker or equivalent to populate the db
- write integrations test to ensure all validations works as intended
