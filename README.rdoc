= Considerations before starting work on the app:

- Form for user to input url to be shortened

- On submit, generate the shortened link and allow user to click(test it)

- routes
	-- When a request comes in with the format http://our-site/fEb17, redirect user to the original url
		--- for e.g,
			---- example.com/8dK23e 
			---- /show/:key
			---- Url.find key
			---- redirect to the original_url returned, 


- models
	-- Link
		--- original_url 
		--- shortened_url, must be unique
	-- Visitor
		--- ipaddr
		--- link_id [FK]

- helper
	-- come out with a method that returns a random string of length 5

- validation
	-- ensure url is not empty and ensure that its in a proper url format



= (Unimplemented)Improvements

== General
- use ruby's to_s method to so that we no longer have to store the shortened_url in db. This avoids any lookup.
- url validation is too simple. find a gem that does extensive checks.
- store ip addresses as IpAddr instead of string
- add db index on shortened url to increase lookups
- add visits counter so that we can use that information to cache/store urls which are popular
- ensure shortened_url that is generated does not collide with existing values in the db


== Testing
- use Faker or equivalent to populate the db
- write integrations test to ensure all validations works as intended
