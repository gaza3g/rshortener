= Considerations before starting work on the app:

Create form for user to input url to be shortened

On submit, generate the shortened link and allow user to click(test it)

== Models
<b>Link</b>
<tt>original_url</tt>
<tt>shortened_url, must be unique</tt>
<b>Visitor</b>
<tt>ipaddr</tt>
<tt>link_id [FK]</tt>

== Routes
When a request comes in with the format http://our-site/fEb17, redirect user to the original url
for e.g
1) example.com/8dK23e 
2) /show/:key
3) Link.find key
4) redirect to the original_url returned, 



== Helper
Come out with a method that returns a random string of length 5

== Validation
Ensure url is not empty and ensure that its in a proper url format



= (Unimplemented)Improvements

== General
- use ruby's to_s method to so that we no longer have to store the shortened_url in db. This avoids any lookup.
- url validation is too simple. find a gem that does extensive checks.
- store ip addresses as IpAddr instead of string
- add db index on shortened url to increase lookups
- add visits counter so that we can use that information to cache/store urls which are popular
- ensure shortened_url that is generated does not collide with existing values in the db


== Testing
- use Faker or equivalent to populate the db
- write integrations test to ensure all validations works as intended
